{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","createStyles","root","margin","spacing","width","flexGrow","inputSide","minWidth","padding","outputSide","formRoot","passwordRow","encryptionRow","marginTop","formControl","downloadOptions","downloadOptionsPane","downloadButtonMain","button","downloadButtonBar","pdfOutput","textAlign","maxWidth","App","classes","React","useState","ssid","setSSID","password","setPassword","encryption","setEncryption","hiddenSSID","setHiddenSSID","output","setOutput","setDownloadOptions","displaySSID","setDisplaySSID","displayPassword","setDisplayPassword","displayHeader","setDisplayHeader","headerText","setHeaderText","updateOutput","a","trim","generateWifiQRCode","outputFormat","type","out","console","log","savePDF","input","document","getElementById","html2canvas","scrollY","window","canvas","imgData","toDataURL","pdf","jsPDF","imgProps","getImageProperties","pdfWidth","internal","pageSize","getWidth","pdfHeight","height","addImage","save","savePNG","saveAs","uri","filename","link","createElement","download","href","body","appendChild","click","removeChild","open","className","Grid","container","direction","justify","alignItems","item","xs","Typography","variant","gutterBottom","display","Paper","elevation","noValidate","autoComplete","TextField","id","label","value","onChange","event","target","Tooltip","title","arrow","FormControlLabel","control","Checkbox","checked","name","color","FormControl","component","FormLabel","RadioGroup","row","aria-label","Radio","src","alt","Button","onClick","FormGroup","Switch","disabled","startIcon","printContents","innerHTML","originalContents","print","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ab05485e.chunk.js","sourcesContent":["import React from 'react'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport TextField from '@material-ui/core/TextField'\nimport FormControl from '@material-ui/core/FormControl'\nimport Grid from '@material-ui/core/Grid'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Switch from '@material-ui/core/Switch'\nimport Paper from '@material-ui/core/Paper'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport Radio from '@material-ui/core/Radio'\nimport RadioGroup from '@material-ui/core/RadioGroup'\nimport FormLabel from '@material-ui/core/FormLabel'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport Typography from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\nimport FormGroup from '@material-ui/core/FormGroup'\nimport SaveIcon from '@material-ui/icons/Save'\nimport PrintIcon from '@material-ui/icons/Print'\nimport PictureAsPdfIcon from '@material-ui/icons/PictureAsPdf'\nimport jsPDF from 'jspdf'\nimport html2canvas from 'html2canvas'\n\nimport { generateWifiQRCode } from 'wifi-qr-code-generator'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      margin: theme.spacing(10),\n      width: '100%',\n      flexGrow: 1\n    },\n\n    inputSide: {\n      // background: '#ffff00',\n      // marginLeft: theme.spacing(5),\n      // margin: 'auto',\n      // maxWidth: 500,\n      minWidth: 500,\n      // width: '100%',\n      padding: theme.spacing(5)\n    },\n    outputSide: {\n      // background: '#ffff00',\n      // marginLeft: theme.spacing(5),\n      // margin: 0,\n\n      // margin: 'auto',\n      // maxWidth: 500,\n      minWidth: 500,\n      // width: '100%'\n      padding: theme.spacing(5)\n    },\n    formRoot: {\n      // '& > *': {\n      //   margin: theme.spacing(1),\n      //   width: '25ch'\n      // }\n    },\n    passwordRow: {},\n    encryptionRow: {\n      marginTop: theme.spacing(4)\n    },\n    formControl: {\n      margin: theme.spacing(1)\n      // minWidth: 120,\n    },\n    downloadOptions: {\n      marginTop: theme.spacing(7),\n      width: '100%'\n    },\n    downloadOptionsPane: {\n      width: '100%'\n    },\n    downloadButtonMain: {\n      marginTop: theme.spacing(3)\n    },\n    button: {\n      margin: theme.spacing(1)\n    },\n    downloadButtonBar: {\n      marginTop: theme.spacing(3)\n    },\n    pdfOutput: {\n      padding: theme.spacing(3),\n      textAlign: 'center',\n      margin: 0,\n      minWidth: 530,\n      maxWidth: 530\n      // width: '100%'\n      // overflow: 'visible'\n    }\n  })\n)\n\nfunction App() {\n  const classes = useStyles()\n\n  const [ssid, setSSID] = React.useState('')\n  const [password, setPassword] = React.useState('')\n  const [encryption, setEncryption] = React.useState('WPA')\n  const [hiddenSSID, setHiddenSSID] = React.useState(false)\n\n  const [output, setOutput] = React.useState('')\n\n  const [downloadOptions, setDownloadOptions] = React.useState(false)\n\n  const [displaySSID, setDisplaySSID] = React.useState(true)\n  const [displayPassword, setDisplayPassword] = React.useState(true)\n  const [displayHeader, setDisplayHeader] = React.useState(true)\n\n  const [headerText, setHeaderText] = React.useState(\n    'Scan to connect to our WiFi'\n  )\n\n  const handleSSIDChange = (event) => {\n    setSSID(event.target.value)\n    updateOutput()\n  }\n\n  const handlePasswordChange = (event) => {\n    setPassword(event.target.value)\n    updateOutput()\n  }\n\n  const handleEncryptionChange = (event) => {\n    setEncryption(event.target.value)\n    updateOutput()\n  }\n  const handleHiddenSSIDChange = (event) => {\n    setHiddenSSID(event.target.checked)\n    updateOutput()\n  }\n\n  const updateOutput = async () => {\n    if (ssid.trim() === '') {\n      return\n    }\n    try {\n      let out = await generateWifiQRCode({\n        ssid: ssid,\n        password: password,\n        encryption: encryption,\n        hiddenSSID: hiddenSSID,\n        outputFormat: { type: 'image/png' }\n      })\n      setOutput(out)\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n\n  const savePDF = async () => {\n    try {\n      const input = document.getElementById('pdf-output')\n      const canvas = await html2canvas(input, {\n        scrollY: -window.scrollY\n      })\n      const imgData = canvas.toDataURL('image/png')\n      const pdf = new jsPDF('p', 'mm', 'a4')\n      const imgProps = pdf.getImageProperties(imgData)\n      const pdfWidth = pdf.internal.pageSize.getWidth()\n      // const pdfHeight = pdf.internal.pageSize.getHeight()\n      // debugger\n      const pdfHeight = (imgProps.height * pdfWidth) / imgProps.width\n      pdf.addImage(imgData, 'PNG', 0, 0, pdfWidth, pdfHeight)\n      pdf.save(`qr-code-${ssid}.pdf`)\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n\n  const savePNG = async () => {\n    const input = document.getElementById('pdf-output')\n    const canvas = await html2canvas(input, {\n      scrollY: -window.scrollY\n    })\n    const imgData = canvas.toDataURL('image/png')\n    saveAs(imgData, `qr-code-${ssid}.png`)\n    // html2canvas(document.getElementById('pdf-output'), ).then(function (canvas) {\n    //   document.body.appendChild(canvas)\n    // })\n  }\n\n  const print = () => {\n    var printContents = document.getElementById('pdf-output').innerHTML\n    var originalContents = document.body.innerHTML\n    document.body.innerHTML = printContents\n    window.print()\n    document.body.innerHTML = originalContents\n  }\n\n  function saveAs(uri, filename) {\n    var link = document.createElement('a')\n    if (typeof link.download === 'string') {\n      link.href = uri\n      link.download = filename\n\n      //Firefox requires the link to be in the body\n      document.body.appendChild(link)\n\n      //simulate click\n      link.click()\n\n      //remove the link when done\n      document.body.removeChild(link)\n    } else {\n      window.open(uri)\n    }\n  }\n\n  return (\n    <div className={classes.root}>\n      <Grid\n        container\n        direction='column'\n        justify='flex-start'\n        alignItems='center'\n        spacing={3}\n      >\n        <Grid item xs>\n          <Grid\n            container\n            direction='column'\n            justify='flex-start'\n            alignItems='center'\n            spacing={0}\n          >\n            <Grid item xs>\n              <Typography variant='h3' gutterBottom>\n                WiFi QR Code Login Generator\n              </Typography>\n            </Grid>\n            <Grid item xs>\n              <Typography variant='caption' display='block' gutterBottom>\n                A free utility to help you print a WiFi login card. Point your\n                phone's camera at the QR Code to connect automatically.\n              </Typography>\n            </Grid>\n            <Grid item xs>\n              <Typography variant='caption' display='block' gutterBottom>\n                Your WiFi information is never sent to the server.\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs>\n          <Paper elevation={1} className={classes.inputSide}>\n            <form className={classes.formRoot} noValidate autoComplete='off'>\n              <Grid\n                container\n                direction='column'\n                justify='center'\n                alignItems='flex-start'\n              >\n                <Grid item xs={12}>\n                  <Grid container justify='center' alignItems='flex-start'>\n                    <Grid item xs={9}>\n                      <TextField\n                        className={classes.formControl}\n                        id='ssid'\n                        label='WiFi Name (SSID)'\n                        value={ssid}\n                        onChange={handleSSIDChange}\n                      />\n                    </Grid>\n                    <Grid item xs={3}>\n                      <Tooltip title='Is this a hidden WiFi network?' arrow>\n                        <FormControlLabel\n                          className={classes.formControl}\n                          control={\n                            <Checkbox\n                              className={classes.formControl}\n                              checked={hiddenSSID}\n                              onChange={handleHiddenSSIDChange}\n                              name='hidden'\n                              color='primary'\n                            />\n                          }\n                          label='Hidden?'\n                        />\n                      </Tooltip>\n                    </Grid>\n                  </Grid>\n                </Grid>\n                <Grid item xs={12} className={classes.passwordRow}>\n                  <TextField\n                    // className={classes.formControl}\n                    id='password'\n                    label='Password'\n                    value={password}\n                    onChange={handlePasswordChange}\n                  />\n                </Grid>\n\n                <Grid item xs={12} className={classes.encryptionRow}>\n                  <FormControl component='fieldset'>\n                    <FormLabel component='legend'>Encryption</FormLabel>\n                    <RadioGroup\n                      row\n                      aria-label='encryption'\n                      name='encryption'\n                      value={encryption}\n                      onChange={handleEncryptionChange}\n                    >\n                      <FormControlLabel\n                        value='WPA'\n                        control={<Radio />}\n                        label='WPA / WPA2'\n                      />\n                      <FormControlLabel\n                        value='WEP'\n                        control={<Radio />}\n                        label='WEP'\n                      />\n                      <FormControlLabel\n                        value='None'\n                        control={<Radio />}\n                        label='None'\n                      />\n                    </RadioGroup>\n                  </FormControl>\n                </Grid>\n              </Grid>\n            </form>\n          </Paper>\n        </Grid>\n        <Grid item xs>\n          <>\n            {output && ssid ? (\n              <>\n                <Paper elevation={0} className={classes.outputSide}>\n                  <Grid\n                    container\n                    direction='column'\n                    justify='center'\n                    alignItems='center'\n                  >\n                    <Grid item>\n                      <Grid\n                        container\n                        direction='column'\n                        justify='center'\n                        alignItems='center'\n                      >\n                        <Paper elevation={3} className={classes.pdfOutput}>\n                          <div id='pdf-output'>\n                            {displayHeader ? (\n                              <>\n                                <Grid item xs={12}>\n                                  <Typography variant='h6' gutterBottom>\n                                    {headerText}\n                                  </Typography>\n                                </Grid>\n                              </>\n                            ) : (\n                              <></>\n                            )}\n\n                            <Grid item xs={12}>\n                              <div>\n                                <img\n                                  src={output}\n                                  alt='qr-code'\n                                  id='qr-code-image'\n                                />\n                              </div>\n                            </Grid>\n                            {displaySSID ? (\n                              <>\n                                <Grid item xs={12}>\n                                  <Typography variant='subtitle1'>\n                                    WiFi: <strong>{ssid}</strong>\n                                  </Typography>\n                                </Grid>\n                              </>\n                            ) : (\n                              <></>\n                            )}\n\n                            {displayPassword ? (\n                              <>\n                                <Grid item xs={12}>\n                                  <Typography variant='subtitle1' gutterBottom>\n                                    Password: <strong>{password}</strong>\n                                  </Typography>\n                                </Grid>\n                              </>\n                            ) : (\n                              <></>\n                            )}\n                          </div>\n                        </Paper>\n                      </Grid>\n                    </Grid>\n\n                    {downloadOptions ? (\n                      <></>\n                    ) : (\n                      <Grid item>\n                        <Button\n                          variant='contained'\n                          color='primary'\n                          onClick={() => setDownloadOptions(true)}\n                          className={classes.downloadButtonMain}\n                        >\n                          Download/Print\n                        </Button>\n                      </Grid>\n                    )}\n                  </Grid>\n                  {downloadOptions ? (\n                    <>\n                      <Grid\n                        container\n                        direction='column'\n                        justify='center'\n                        alignItems='flex-start'\n                        className={classes.downloadOptions}\n                      >\n                        <Grid item xs={12}>\n                          <Typography variant='h6' gutterBottom>\n                            Download Options\n                          </Typography>\n                        </Grid>\n                        <Grid item xs={12}>\n                          <FormGroup>\n                            <Grid container>\n                              <Grid item xs>\n                                <FormControlLabel\n                                  control={\n                                    <Switch\n                                      checked={displayHeader}\n                                      onChange={(event) =>\n                                        setDisplayHeader(event.target.checked)\n                                      }\n                                      name='displayHeader'\n                                    />\n                                  }\n                                  label='Show Header'\n                                />\n                              </Grid>\n                              <Grid item xs>\n                                <TextField\n                                  id='customHeader'\n                                  label=''\n                                  disabled={!displayHeader}\n                                  value={headerText}\n                                  // className={classes.downloadOptionsPane}\n                                  onChange={(event) =>\n                                    setHeaderText(event.target.value)\n                                  }\n                                />\n                              </Grid>\n                            </Grid>\n                            <FormControlLabel\n                              control={\n                                <Switch\n                                  checked={displaySSID}\n                                  onChange={(event) =>\n                                    setDisplaySSID(event.target.checked)\n                                  }\n                                  name='displaySSID'\n                                />\n                              }\n                              label='Show WiFi Name'\n                            />\n                            <FormControlLabel\n                              control={\n                                <Switch\n                                  checked={displayPassword}\n                                  onChange={(event) =>\n                                    setDisplayPassword(event.target.checked)\n                                  }\n                                  name='displayPassword'\n                                />\n                              }\n                              label='Show Password'\n                            />\n                          </FormGroup>\n                        </Grid>\n                        <Grid item xs={12}>\n                          <div className={classes.downloadButtonBar}>\n                            <Button\n                              variant='contained'\n                              color='primary'\n                              onClick={savePNG}\n                              className={classes.button}\n                              startIcon={<SaveIcon />}\n                            >\n                              Download PNG\n                            </Button>\n\n                            <Button\n                              variant='contained'\n                              color='primary'\n                              onClick={savePDF}\n                              className={classes.button}\n                              startIcon={<PictureAsPdfIcon />}\n                            >\n                              Download PDF\n                            </Button>\n\n                            <Button\n                              variant='contained'\n                              color='primary'\n                              onClick={print}\n                              className={classes.button}\n                              startIcon={<PrintIcon />}\n                            >\n                              Print\n                            </Button>\n                          </div>\n                        </Grid>\n                      </Grid>\n                    </>\n                  ) : (\n                    <> </>\n                  )}\n                </Paper>\n              </>\n            ) : (\n              <> </>\n            )}\n          </>\n        </Grid>\n      </Grid>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}