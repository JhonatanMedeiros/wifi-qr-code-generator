{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","createStyles","root","margin","spacing","mainPanel","padding","inputSide","minWidth","outputSide","textAlign","height","outputImage","paddingTop","paddingBottom","encryptionRow","marginTop","formControl","App","classes","React","useState","ssid","setSSID","password","setPassword","encryption","setEncryption","hiddenSSID","setHiddenSSID","output","setOutput","updateOutput","a","trim","generateWifiQRCode","outputFormat","type","out","console","log","className","Grid","container","direction","justify","alignItems","item","xs","Typography","variant","gutterBottom","display","href","Paper","elevation","wrap","zeroMinWidth","noValidate","autoComplete","TextField","id","label","value","onChange","event","target","Tooltip","title","arrow","FormControlLabel","control","Checkbox","checked","name","color","FormControl","component","FormLabel","RadioGroup","row","aria-label","Radio","src","alt","width","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d78c7211.chunk.js","sourcesContent":["import Checkbox from '@material-ui/core/Checkbox'\nimport FormControl from '@material-ui/core/FormControl'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport FormLabel from '@material-ui/core/FormLabel'\nimport Grid from '@material-ui/core/Grid'\nimport Paper from '@material-ui/core/Paper'\nimport Radio from '@material-ui/core/Radio'\nimport RadioGroup from '@material-ui/core/RadioGroup'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport TextField from '@material-ui/core/TextField'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport Typography from '@material-ui/core/Typography'\nimport React from 'react'\nimport { generateWifiQRCode } from 'wifi-qr-code-generator'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      margin: theme.spacing(10)\n      // width: 948,\n      // flexGrow: 1\n    },\n    mainPanel: {\n      padding: theme.spacing(5)\n    },\n    inputSide: {\n      minWidth: 450,\n      padding: theme.spacing(2)\n    },\n    outputSide: {\n      minWidth: 200,\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      height: '100%'\n    },\n    outputImage: {\n      paddingTop: 16,\n      paddingBottom: 16\n    },\n    encryptionRow: {\n      marginTop: theme.spacing(4)\n    },\n    formControl: {\n      // marginTop: theme.spacing(1)\n      // minWidth: 120,\n    }\n  })\n)\n\nfunction App() {\n  const classes = useStyles()\n\n  const [ssid, setSSID] = React.useState('')\n  const [password, setPassword] = React.useState('')\n  const [encryption, setEncryption] = React.useState('WPA')\n  const [hiddenSSID, setHiddenSSID] = React.useState(false)\n\n  const [output, setOutput] = React.useState('')\n\n  const handleSSIDChange = (event) => {\n    setSSID(event.target.value)\n    updateOutput()\n  }\n\n  const handlePasswordChange = (event) => {\n    setPassword(event.target.value)\n    updateOutput()\n  }\n\n  const handleEncryptionChange = (event) => {\n    setEncryption(event.target.value)\n    updateOutput()\n  }\n  const handleHiddenSSIDChange = (event) => {\n    setHiddenSSID(event.target.checked)\n    updateOutput()\n  }\n\n  const updateOutput = async () => {\n    if (ssid.trim() === '') {\n      return\n    }\n    try {\n      let out = await generateWifiQRCode({\n        ssid: ssid,\n        password: password,\n        encryption: encryption,\n        hiddenSSID: hiddenSSID,\n        outputFormat: { type: 'image/png' }\n      })\n      setOutput(out)\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n\n  return (\n    <div className={classes.root}>\n      <Grid\n        container\n        direction='column'\n        justify='flex-start'\n        alignItems='center'\n        spacing={3}\n      >\n        <Grid item xs>\n          <Grid\n            container\n            direction='column'\n            justify='flex-start'\n            alignItems='center'\n            spacing={0}\n          >\n            <Grid item xs>\n              <Typography variant='h3' gutterBottom>\n                WiFi-QR-Code-Generator Demo\n              </Typography>\n            </Grid>\n            <Grid item xs>\n              <Typography variant='caption' display='block' gutterBottom>\n                This is a demo of{' '}\n                <a href='https://www.npmjs.com/package/wifi-qr-code-generator'>\n                  wifi-qr-code-generator npm module\n                </a>\n                . Source code{' '}\n                <a href='https://github.com/fantasywidgets/wifi-qr-code-generator/'>\n                  available in GitHub\n                </a>\n                .\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs>\n          <Paper elevation={3} className={classes.mainPanel}>\n            <Grid\n              container\n              direction='row'\n              justify='center'\n              alignItems='flex-start'\n              wrap='nowrap'\n            >\n              <Grid item xs={6} className={classes.inputSide} zeroMinWidth>\n                <form noValidate autoComplete='off'>\n                  <Grid\n                    container\n                    direction='column'\n                    justify='center'\n                    alignItems='flex-start'\n                  >\n                    <Grid item xs={12}>\n                      <Grid\n                        container\n                        justify='flex-start'\n                        alignItems='flex-start'\n                      >\n                        <Grid item xs={9}>\n                          <TextField\n                            id='ssid'\n                            label='WiFi Name (SSID)'\n                            value={ssid}\n                            onChange={handleSSIDChange}\n                          />\n                        </Grid>\n                        <Grid item xs={3}>\n                          <Tooltip title='Is this a hidden WiFi network?' arrow>\n                            <FormControlLabel\n                              control={\n                                <Checkbox\n                                  checked={hiddenSSID}\n                                  onChange={handleHiddenSSIDChange}\n                                  name='hidden'\n                                  color='primary'\n                                />\n                              }\n                              label='Hidden?'\n                            />\n                          </Tooltip>\n                        </Grid>\n                      </Grid>\n                    </Grid>\n                    <Grid item xs={12}>\n                      <TextField\n                        id='password'\n                        label='Password'\n                        value={password}\n                        onChange={handlePasswordChange}\n                      />\n                    </Grid>\n\n                    <Grid item xs={12} className={classes.encryptionRow}>\n                      <FormControl component='fieldset'>\n                        <FormLabel component='legend'>Encryption</FormLabel>\n                        <RadioGroup\n                          row\n                          aria-label='encryption'\n                          name='encryption'\n                          value={encryption}\n                          onChange={handleEncryptionChange}\n                        >\n                          <FormControlLabel\n                            value='WPA'\n                            control={<Radio />}\n                            label='WPA / WPA2'\n                          />\n                          <FormControlLabel\n                            value='WEP'\n                            control={<Radio />}\n                            label='WEP'\n                          />\n                          <FormControlLabel\n                            value='None'\n                            control={<Radio />}\n                            label='None'\n                          />\n                        </RadioGroup>\n                      </FormControl>\n                    </Grid>\n                  </Grid>\n                </form>\n              </Grid>\n              <Grid item xs={6} zeroMinWidth>\n                <div className={classes.outputSide}>\n                  {output && ssid ? (\n                    <>\n                      <img\n                        src={output}\n                        className={classes.outputImage}\n                        alt='qr-code'\n                        id='qr-code-image'\n                        width='150'\n                        height='150'\n                      />\n                    </>\n                  ) : (\n                    <></>\n                  )}\n                </div>\n              </Grid>\n            </Grid>\n          </Paper>\n        </Grid>\n      </Grid>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}